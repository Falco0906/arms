// Firebase Security Rules

// Firestore Rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isUserWithEmail() {
      return isAuthenticated() && 
             request.auth.token.email.matches('.*@klh\\.edu\\.in$');
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isFaculty() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'faculty';
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isUserWithEmail();
      allow update: if request.auth.uid == userId || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Courses collection
    match /courses/{courseId} {
      allow read: if isAuthenticated();
      allow create: if isFaculty() || isAdmin();
      allow update: if isFaculty() || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Materials collection
    match /materials/{materialId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if request.auth.uid == resource.data.uploaderId || isAdmin();
      allow delete: if request.auth.uid == resource.data.uploaderId || isAdmin();
    }
    
    // Events collection
    match /events/{eventId} {
      allow read: if isAuthenticated();
      allow create: if isFaculty() || isAdmin();
      allow update: if isFaculty() || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated();
      allow update: if request.auth.uid == resource.data.userId;
      allow delete: if request.auth.uid == resource.data.userId || isAdmin();
    }
  }
}

// Storage Rules
rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    match /materials/{courseId}/{filename} {
      allow read: if request.auth != null;
      allow write: if request.auth != null
                   && request.resource.size < 100 * 1024 * 1024 // 100MB max
                   && request.resource.contentType.matches('application/pdf|text/.*|image/.*');
      allow delete: if request.auth != null 
                    && (resource.metadata.uploaderId == request.auth.uid || isAdmin());
    }
    
    match /avatars/{userId}/{filename} {
      allow read: if request.auth != null;
      allow write: if request.auth != null
                   && request.auth.uid == userId
                   && request.resource.size < 5 * 1024 * 1024 // 5MB max
                   && request.resource.contentType.matches('image/.*');
    }
  }
}